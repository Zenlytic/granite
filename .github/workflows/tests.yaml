name: Metrics Layer CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov pytest-mock codecov
          pip install ".[all]"

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest --cov=metrics_layer/ --cov-report=xml

      - name: Report on code coverage
        run: |
          codecov

  publish:
    runs-on: "ubuntu-latest"

    steps:
        - name: Set up Python 3.8.11
          uses: actions/setup-python@v4
          with:
            python-version: 3.8.11

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install poetry==1.2.1

        - name: Build package
          run: poetry build

        - name: Publish package
          uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
          with:
            user: __token__
            password: ${{ secrets.PYPI_TOKEN }}

      # - name: Build and publish to pypi
      #   uses: JRubics/poetry-publish@v1.15
      #   if: github.repository == 'Zenlytic/metrics_layer' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      #   with:
      #     python_version: "3.8.11"
      #     poetry_version: "==1.2.1" # (PIP version specifier syntax)
      #     pypi_token: ${{ secrets.PYPI_TOKEN }}
      